Grammar

    0 $accept: prog $end

    1 prog: beginning
    2     | ε

    3 beginning: part_of_code
    4          | beginning part_of_code

    5 part_of_code: body
    6             | designs
    7             | import
    8             | function_dec
    9             | class_dec

   10 function_dec: '(' K_FUNCTION function_body ')' '(' ')' ';'
   11             | '(' K_ASYNC '(' ')' ARROW body ')' '(' ')' ';'
   12             | '(' '(' ')' ARROW body ')' '(' ')' ';'
   13             | K_FUNCTION ID function_body

   14 class_dec: K_CLASS ID '{' ID code_block_class '}'
   15          | K_CLASS ID K_EXTENDS ID '{' ID code_block_class '}'
   16          | K_CLASS ID K_EXTENDS ID '.' sequence_id '{' ID code_block_class '}'

   17 import: K_IMPORT L_STR ';'
   18       | K_IMPORT import_content1 K_FROM L_STR ';'

   19 import_content1: ID
   20                | '*' K_AS ID
   21                | '{' import_content2 '}'
   22                | ID ',' '{' import_content2 '}'
   23                | ID ',' '*' K_AS ID

   24 import_content2: ID
   25                | ID K_AS ID
   26                | K_DEFAULT K_AS ID
   27                | L_STR K_AS ID
   28                | import_content2 ',' import_content2

   29 body: '{' '}'
   30     | '{' code_inside '}'

   31 code_block_class: '(' ')' body
   32                 | '(' args ')' body
   33                 | code_block_class ID '(' ')' body
   34                 | code_block_class ID '(' args ')' body

   35 code_inside: designs
   36            | body
   37            | function_dec
   38            | class_dec
   39            | code_inside designs
   40            | code_inside body
   41            | code_inside function_dec
   42            | code_inside class_dec

   43 designs: ID ':' designs
   44        | expr ';'
   45        | declaration ';'
   46        | interrupt ';'
   47        | try_catch
   48        | if
   49        | ';'
   50        | switch
   51        | while
   52        | do_while
   53        | for

   54 ret_block_obj: ID ':' expr ';'
   55              | ret_block_obj ID ':' expr
   56              | ret_block_obj ID ':' expr ';'

   57 if: K_IF '(' expr ')' part_of_code
   58   | K_IF '(' expr ')' block K_ELSE block
   59   | K_IF '(' expr ')' block K_ELSE if

   60 block: body
   61      | declaration ';'
   62      | expr ';'
   63      | ';'
   64      | interrupt ';'

   65 while: K_WHILE '(' expr ')' part_of_code

   66 do_while: K_DO part_of_code K_WHILE '(' expr ')' ';'

   67 try_catch: K_TRY body K_FINALLY body
   68          | K_TRY body K_CATCH '(' '{' ID '}' ')' body
   69          | K_TRY body K_CATCH '(' '{' ID ',' sequence_id '}' ')' body
   70          | K_TRY body K_CATCH '(' ID ')' body K_FINALLY body
   71          | K_TRY body K_CATCH '(' ID ')' body

   72 sequence_id: ID
   73            | ID ',' sequence_id

   74 for: K_FOR '(' initialization ';' condition ';' afterthought ')' part_of_code
   75    | K_FOR '(' type ID K_IN expr ')' part_of_code
   76    | K_FOR '(' ID K_IN expr ')' part_of_code
   77    | K_FOR '(' type ID K_OF expr ')' part_of_code
   78    | K_FOR '(' ID K_OF expr ')' part_of_code

   79 initialization: declaration
   80               | expr
   81               | ε

   82 afterthought: expr
   83             | ε

   84 condition: expr
   85          | ε

   86 switch: K_SWITCH '(' expr ')' '{' in_switch '}'
   87       | K_SWITCH '(' expr ')' '{' K_DEFAULT ':' beginning '}'
   88       | K_SWITCH '(' expr ')' '{' '}'

   89 in_switch: case
   90          | default

   91 default: K_DEFAULT ':' case
   92        | K_DEFAULT ':' beginning case
   93        | case K_DEFAULT ':' beginning
   94        | case K_DEFAULT ':' beginning case
   95        | case K_DEFAULT ':'

   96 case: K_CASE expr ':'
   97     | K_CASE expr ':' beginning
   98     | case K_CASE expr ':'
   99     | case K_CASE expr ':' beginning

  100 declaration: type ID
  101            | type ID '=' expr
  102            | type ID '=' expr OP_LOGIC '{' '}'
  103            | type ID '=' '{' '}'
  104            | type ID '=' function_dec
  105            | declaration ',' ID
  106            | declaration ',' ID '=' expr
  107            | declaration ',' ID '=' expr OP_LOGIC '{' '}'
  108            | declaration ',' ID '=' '{' '}'

  109 type: K_VAR
  110     | K_CONST
  111     | K_LET

  112 expr_logic: L_BOOL
  113           | '!' expr
  114           | '~' expr
  115           | variable '=' expr OP_LOGIC '{' '}'
  116           | expr OP_LOGIC expr
  117           | expr '?' expr ':' expr

  118 expr_arithmetic: number
  119                | OP_INC variable
  120                | variable OP_INC
  121                | expr OP_ARITHM expr
  122                | expr OP_ARITHM_SUM expr
  123                | variable OP_AND_ASSIGN expr
  124                | expr OP_BIT expr
  125                | expr '*' expr
  126                | OP_ARITHM_SUM expr

  127 expr: variable
  128     | val_cant_assign
  129     | new
  130     | delete
  131     | K_THIS
  132     | K_THIS arr_prototype
  133     | expr_logic
  134     | expr_arithmetic
  135     | '(' expr ')'
  136     | '(' expr ')' '.' method
  137     | K_NULL
  138     | variable '=' expr
  139     | variable '=' function_dec
  140     | variable '=' '{' '}'
  141     | expr ',' expr
  142     | ID K_IN expr
  143     | val_cant_assign K_IN expr
  144     | K_TYPEOF expr
  145     | expr K_INSTANCEOF ID

  146 new: K_NEW variable

  147 delete: K_DELETE variable
  148       | K_DELETE '(' variable ')'

  149 brekets_with_content: '(' ')'
  150                     | '(' expr ')'
  151                     | '(' expr ',' ')'
  152                     | brekets_with_content '(' ')'
  153                     | brekets_with_content '(' expr ')'
  154                     | brekets_with_content '(' expr ',' ')'

  155 number: L_FLOAT
  156       | L_INT
  157       | L_INT_HEX
  158       | L_INT_OCT
  159       | number '.' method

  160 val_cant_assign: L_STR
  161                | L_STR '.' method
  162                | arr_prototype
  163                | '{' inner_obj '}'

  164 variable: ID
  165         | K_THIS '.' ID
  166         | variable '.' method
  167         | variable '[' expr ']'
  168         | K_FUNCTION function_body
  169         | variable brekets_with_content

  170 method: ID
  171       | ID brekets_with_content
  172       | method '.' ID brekets_with_content
  173       | method '.' ID

  174 inner_obj: L_STR ':' expr
  175          | ID ':' expr
  176          | inner_obj ',' req_inner
  177          | ID ':' K_FUNCTION ID function_body

  178 req_inner: inner_obj
  179          | req_inner ',' inner_obj

  180 arr_prototype: '[' ']'
  181              | '[' ',' ']'
  182              | '[' expr ']'
  183              | '[' ',' expr ']'
  184              | '[' expr ',' ']'
  185              | '[' ',' expr ',' ']'

  186 function_body: '(' args ')' body
  187              | '(' ')' body

  188 args: ID
  189     | ID '=' expr
  190     | args ',' args

  191 interrupt: K_THROW expr
  192          | K_RETURN
  193          | K_RETURN expr
  194          | K_RETURN '{' '}'
  195          | K_RETURN '{' ret_block_obj '}'
  196          | K_BREAK
  197          | K_BREAK ID
  198          | K_CONTINUE
  199          | K_CONTINUE ID


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 113
    '(' (40) 10 11 12 31 32 33 34 57 58 59 65 66 68 69 70 71 74 75 76 77 78 86 87 88 135 136 148 149 150 151 152 153 154 186 187
    ')' (41) 10 11 12 31 32 33 34 57 58 59 65 66 68 69 70 71 74 75 76 77 78 86 87 88 135 136 148 149 150 151 152 153 154 186 187
    '*' (42) 20 23 125
    ',' (44) 22 23 28 69 73 105 106 107 108 141 151 154 176 179 181 183 184 185 190
    '.' (46) 16 136 159 161 165 166 172 173
    ':' (58) 43 54 55 56 87 91 92 93 94 95 96 97 98 99 117 174 175 177
    ';' (59) 10 11 12 17 18 44 45 46 49 54 56 61 62 63 64 66 74
    '=' (61) 101 102 103 104 106 107 108 115 138 139 140 189
    '?' (63) 117
    '[' (91) 167 180 181 182 183 184 185
    ']' (93) 167 180 181 182 183 184 185
    '{' (123) 14 15 16 21 22 29 30 68 69 86 87 88 102 103 107 108 115 140 163 194 195
    '}' (125) 14 15 16 21 22 29 30 68 69 86 87 88 102 103 107 108 115 140 163 194 195
    '~' (126) 114
    error (256)
    K_ASYNC (258) 11
    K_EXTENDS (259) 15 16
    K_AS (260) 20 23 25 26 27
    K_BREAK (261) 196 197
    K_CASE (262) 96 97 98 99
    K_CATCH (263) 68 69 70 71
    K_CLASS (264) 14 15 16
    K_CONST (265) 110
    K_CONTINUE (266) 198 199
    K_DEFAULT (267) 26 87 91 92 93 94 95
    K_DELETE (268) 147 148
    K_DO (269) 66
    K_ELSE (270) 58 59
    K_FINALLY (271) 67 70
    K_FOR (272) 74 75 76 77 78
    K_FROM (273) 18
    K_FUNCTION (274) 10 13 168 177
    K_IF (275) 57 58 59
    K_IN (276) 75 76 142 143
    K_IMPORT (277) 17 18
    K_INSTANCEOF (278) 145
    K_LET (279) 111
    K_NEW (280) 146
    K_NULL (281) 137
    K_OF (282) 77 78
    K_RETURN (283) 192 193 194 195
    K_SWITCH (284) 86 87 88
    K_THIS (285) 131 132 165
    K_THROW (286) 191
    K_TRY (287) 67 68 69 70 71
    K_TYPEOF (288) 144
    K_VAR (289) 109
    K_WHILE (290) 65 66
    L_INT (291) 156
    L_INT_OCT (292) 158
    L_INT_HEX (293) 157
    L_FLOAT (294) 155
    L_BOOL (295) 112
    L_STR (296) 17 18 27 160 161 174
    ID (297) 13 14 15 16 19 20 22 23 24 25 26 27 33 34 43 54 55 56 68 69 70 71 72 73 75 76 77 78 100 101 102 103 104 105 106 107 108 142 145 164 165 170 171 172 173 175 177 188 189 197 199
    ARROW (298) 11 12
    OP_AND_ASSIGN (299) 123
    OP_ARITHM_SUM (300) 122 126
    OP_ARITHM (301) 121
    OP_INC (302) 119 120
    OP_LOGIC (303) 102 107 115 116
    OP_BIT (304) 124
    EXPR (305)
    FIX (306)


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    prog (68)
        on left: 1 2
        on right: 0
    beginning (69)
        on left: 3 4
        on right: 1 4 87 92 93 94 97 99
    part_of_code (70)
        on left: 5 6 7 8 9
        on right: 3 4 57 65 66 74 75 76 77 78
    function_dec (71)
        on left: 10 11 12 13
        on right: 8 37 41 104 139
    class_dec (72)
        on left: 14 15 16
        on right: 9 38 42
    import (73)
        on left: 17 18
        on right: 7
    import_content1 (74)
        on left: 19 20 21 22 23
        on right: 18
    import_content2 (75)
        on left: 24 25 26 27 28
        on right: 21 22 28
    body (76)
        on left: 29 30
        on right: 5 11 12 31 32 33 34 36 40 60 67 68 69 70 71 186 187
    code_block_class (77)
        on left: 31 32 33 34
        on right: 14 15 16 33 34
    code_inside (78)
        on left: 35 36 37 38 39 40 41 42
        on right: 30 39 40 41 42
    designs (79)
        on left: 43 44 45 46 47 48 49 50 51 52 53
        on right: 6 35 39 43
    ret_block_obj (80)
        on left: 54 55 56
        on right: 55 56 195
    if (81)
        on left: 57 58 59
        on right: 48 59
    block (82)
        on left: 60 61 62 63 64
        on right: 58 59
    while (83)
        on left: 65
        on right: 51
    do_while (84)
        on left: 66
        on right: 52
    try_catch (85)
        on left: 67 68 69 70 71
        on right: 47
    sequence_id (86)
        on left: 72 73
        on right: 16 69 73
    for (87)
        on left: 74 75 76 77 78
        on right: 53
    initialization (88)
        on left: 79 80 81
        on right: 74
    afterthought (89)
        on left: 82 83
        on right: 74
    condition (90)
        on left: 84 85
        on right: 74
    switch (91)
        on left: 86 87 88
        on right: 50
    in_switch (92)
        on left: 89 90
        on right: 86
    default (93)
        on left: 91 92 93 94 95
        on right: 90
    case (94)
        on left: 96 97 98 99
        on right: 89 91 92 93 94 95 98 99
    declaration (95)
        on left: 100 101 102 103 104 105 106 107 108
        on right: 45 61 79 105 106 107 108
    type (96)
        on left: 109 110 111
        on right: 75 77 100 101 102 103 104
    expr_logic (97)
        on left: 112 113 114 115 116 117
        on right: 133
    expr_arithmetic (98)
        on left: 118 119 120 121 122 123 124 125 126
        on right: 134
    expr (99)
        on left: 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145
        on right: 44 54 55 56 57 58 59 62 65 66 75 76 77 78 80 82 84 86 87 88 96 97 98 99 101 102 106 107 113 114 115 116 117 121 122 123 124 125 126 135 136 138 141 142 143 144 145 150 151 153 154 167 174 175 182 183 184 185 189 191 193
    new (100)
        on left: 146
        on right: 129
    delete (101)
        on left: 147 148
        on right: 130
    brekets_with_content (102)
        on left: 149 150 151 152 153 154
        on right: 152 153 154 169 171 172
    number (103)
        on left: 155 156 157 158 159
        on right: 118 159
    val_cant_assign (104)
        on left: 160 161 162 163
        on right: 128 143
    variable (105)
        on left: 164 165 166 167 168 169
        on right: 115 119 120 123 127 138 139 140 146 147 148 166 167 169
    method (106)
        on left: 170 171 172 173
        on right: 136 159 161 166 172 173
    inner_obj (107)
        on left: 174 175 176 177
        on right: 163 176 178 179
    req_inner (108)
        on left: 178 179
        on right: 176 179
    arr_prototype (109)
        on left: 180 181 182 183 184 185
        on right: 132 162
    function_body (110)
        on left: 186 187
        on right: 10 13 168 177
    args (111)
        on left: 188 189 190
        on right: 32 34 186 190
    interrupt (112)
        on left: 191 192 193 194 195 196 197 198 199
        on right: 46 64


State 0

    0 $accept: • prog $end

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 2 (prog)

    prog             go to state 37
    beginning        go to state 38
    part_of_code     go to state 39
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 1

  196 interrupt: K_BREAK •
  197          | K_BREAK • ID

    ID  shift, and go to state 63

    $default  reduce using rule 196 (interrupt)


State 2

   14 class_dec: K_CLASS • ID '{' ID code_block_class '}'
   15          | K_CLASS • ID K_EXTENDS ID '{' ID code_block_class '}'
   16          | K_CLASS • ID K_EXTENDS ID '.' sequence_id '{' ID code_block_class '}'

    ID  shift, and go to state 64


State 3

  110 type: K_CONST •

    $default  reduce using rule 110 (type)


State 4

  198 interrupt: K_CONTINUE •
  199          | K_CONTINUE • ID

    ID  shift, and go to state 65

    $default  reduce using rule 198 (interrupt)


State 5

  147 delete: K_DELETE • variable
  148       | K_DELETE • '(' variable ')'

    K_FUNCTION  shift, and go to state 66
    K_THIS      shift, and go to state 67
    ID          shift, and go to state 68
    '('         shift, and go to state 69

    variable  go to state 70


State 6

   66 do_while: K_DO • part_of_code K_WHILE '(' expr ')' ';'

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 71
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 7

   74 for: K_FOR • '(' initialization ';' condition ';' afterthought ')' part_of_code
   75    | K_FOR • '(' type ID K_IN expr ')' part_of_code
   76    | K_FOR • '(' ID K_IN expr ')' part_of_code
   77    | K_FOR • '(' type ID K_OF expr ')' part_of_code
   78    | K_FOR • '(' ID K_OF expr ')' part_of_code

    '('  shift, and go to state 72


State 8

   13 function_dec: K_FUNCTION • ID function_body
  168 variable: K_FUNCTION • function_body

    ID   shift, and go to state 73
    '('  shift, and go to state 74

    function_body  go to state 75


State 9

   57 if: K_IF • '(' expr ')' part_of_code
   58   | K_IF • '(' expr ')' block K_ELSE block
   59   | K_IF • '(' expr ')' block K_ELSE if

    '('  shift, and go to state 76


State 10

   17 import: K_IMPORT • L_STR ';'
   18       | K_IMPORT • import_content1 K_FROM L_STR ';'

    L_STR  shift, and go to state 77
    ID     shift, and go to state 78
    '*'    shift, and go to state 79
    '{'    shift, and go to state 80

    import_content1  go to state 81


State 11

  111 type: K_LET •

    $default  reduce using rule 111 (type)


State 12

  146 new: K_NEW • variable

    K_FUNCTION  shift, and go to state 66
    K_THIS      shift, and go to state 67
    ID          shift, and go to state 68

    variable  go to state 82


State 13

  137 expr: K_NULL •

    $default  reduce using rule 137 (expr)


State 14

  192 interrupt: K_RETURN •
  193          | K_RETURN • expr
  194          | K_RETURN • '{' '}'
  195          | K_RETURN • '{' ret_block_obj '}'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 85
    '['            shift, and go to state 36

    $default  reduce using rule 192 (interrupt)

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 86
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 15

   86 switch: K_SWITCH • '(' expr ')' '{' in_switch '}'
   87       | K_SWITCH • '(' expr ')' '{' K_DEFAULT ':' beginning '}'
   88       | K_SWITCH • '(' expr ')' '{' '}'

    '('  shift, and go to state 87


State 16

  131 expr: K_THIS •
  132     | K_THIS • arr_prototype
  165 variable: K_THIS • '.' ID

    '.'  shift, and go to state 88
    '['  shift, and go to state 36

    $default  reduce using rule 131 (expr)

    arr_prototype  go to state 89


State 17

  191 interrupt: K_THROW • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 91
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 18

   67 try_catch: K_TRY • body K_FINALLY body
   68          | K_TRY • body K_CATCH '(' '{' ID '}' ')' body
   69          | K_TRY • body K_CATCH '(' '{' ID ',' sequence_id '}' ')' body
   70          | K_TRY • body K_CATCH '(' ID ')' body K_FINALLY body
   71          | K_TRY • body K_CATCH '(' ID ')' body

    '{'  shift, and go to state 92

    body  go to state 93


State 19

  144 expr: K_TYPEOF • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 94
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 20

  109 type: K_VAR •

    $default  reduce using rule 109 (type)


State 21

   65 while: K_WHILE • '(' expr ')' part_of_code

    '('  shift, and go to state 95


State 22

  156 number: L_INT •

    $default  reduce using rule 156 (number)


State 23

  158 number: L_INT_OCT •

    $default  reduce using rule 158 (number)


State 24

  157 number: L_INT_HEX •

    $default  reduce using rule 157 (number)


State 25

  155 number: L_FLOAT •

    $default  reduce using rule 155 (number)


State 26

  112 expr_logic: L_BOOL •

    $default  reduce using rule 112 (expr_logic)


State 27

  160 val_cant_assign: L_STR •
  161                | L_STR • '.' method

    '.'  shift, and go to state 96

    $default  reduce using rule 160 (val_cant_assign)


State 28

   43 designs: ID • ':' designs
  142 expr: ID • K_IN expr
  164 variable: ID •

    K_IN  shift, and go to state 97
    ':'   shift, and go to state 98

    $default  reduce using rule 164 (variable)


State 29

  126 expr_arithmetic: OP_ARITHM_SUM • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 99
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 30

  119 expr_arithmetic: OP_INC • variable

    K_FUNCTION  shift, and go to state 66
    K_THIS      shift, and go to state 67
    ID          shift, and go to state 68

    variable  go to state 100


State 31

  113 expr_logic: '!' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 101
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 32

  114 expr_logic: '~' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 102
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 33

   10 function_dec: '(' • K_FUNCTION function_body ')' '(' ')' ';'
   11             | '(' • K_ASYNC '(' ')' ARROW body ')' '(' ')' ';'
   12             | '(' • '(' ')' ARROW body ')' '(' ')' ';'
  135 expr: '(' • expr ')'
  136     | '(' • expr ')' '.' method

    K_ASYNC        shift, and go to state 103
    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 104
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 105
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 106
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 34

   49 designs: ';' •

    $default  reduce using rule 49 (designs)


State 35

   29 body: '{' • '}'
   30     | '{' • code_inside '}'
  163 val_cant_assign: '{' • inner_obj '}'

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 107
    ID             shift, and go to state 108
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '}'            shift, and go to state 109
    '['            shift, and go to state 36

    function_dec     go to state 110
    class_dec        go to state 111
    body             go to state 112
    code_inside      go to state 113
    designs          go to state 114
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    inner_obj        go to state 115
    arr_prototype    go to state 61
    interrupt        go to state 62


State 36

  180 arr_prototype: '[' • ']'
  181              | '[' • ',' ']'
  182              | '[' • expr ']'
  183              | '[' • ',' expr ']'
  184              | '[' • expr ',' ']'
  185              | '[' • ',' expr ',' ']'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    ','            shift, and go to state 116
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36
    ']'            shift, and go to state 117

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 118
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 37

    0 $accept: prog • $end

    $end  shift, and go to state 119


State 38

    1 prog: beginning •
    4 beginning: beginning • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 1 (prog)

    part_of_code     go to state 120
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 39

    3 beginning: part_of_code •

    $default  reduce using rule 3 (beginning)


State 40

    8 part_of_code: function_dec •

    $default  reduce using rule 8 (part_of_code)


State 41

    9 part_of_code: class_dec •

    $default  reduce using rule 9 (part_of_code)


State 42

    7 part_of_code: import •

    $default  reduce using rule 7 (part_of_code)


State 43

    5 part_of_code: body •

    $default  reduce using rule 5 (part_of_code)


State 44

    6 part_of_code: designs •

    $default  reduce using rule 6 (part_of_code)


State 45

   48 designs: if •

    $default  reduce using rule 48 (designs)


State 46

   51 designs: while •

    $default  reduce using rule 51 (designs)


State 47

   52 designs: do_while •

    $default  reduce using rule 52 (designs)


State 48

   47 designs: try_catch •

    $default  reduce using rule 47 (designs)


State 49

   53 designs: for •

    $default  reduce using rule 53 (designs)


State 50

   50 designs: switch •

    $default  reduce using rule 50 (designs)


State 51

   45 designs: declaration • ';'
  105 declaration: declaration • ',' ID
  106            | declaration • ',' ID '=' expr
  107            | declaration • ',' ID '=' expr OP_LOGIC '{' '}'
  108            | declaration • ',' ID '=' '{' '}'

    ','  shift, and go to state 121
    ';'  shift, and go to state 122


State 52

  100 declaration: type • ID
  101            | type • ID '=' expr
  102            | type • ID '=' expr OP_LOGIC '{' '}'
  103            | type • ID '=' '{' '}'
  104            | type • ID '=' function_dec

    ID  shift, and go to state 123


State 53

  133 expr: expr_logic •

    $default  reduce using rule 133 (expr)


State 54

  134 expr: expr_arithmetic •

    $default  reduce using rule 134 (expr)


State 55

   44 designs: expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 132


State 56

  129 expr: new •

    $default  reduce using rule 129 (expr)


State 57

  130 expr: delete •

    $default  reduce using rule 130 (expr)


State 58

  118 expr_arithmetic: number •
  159 number: number • '.' method

    '.'  shift, and go to state 133

    $default  reduce using rule 118 (expr_arithmetic)


State 59

  128 expr: val_cant_assign •
  143     | val_cant_assign • K_IN expr

    K_IN  shift, and go to state 134

    $default  reduce using rule 128 (expr)


State 60

  115 expr_logic: variable • '=' expr OP_LOGIC '{' '}'
  120 expr_arithmetic: variable • OP_INC
  123                | variable • OP_AND_ASSIGN expr
  127 expr: variable •
  138     | variable • '=' expr
  139     | variable • '=' function_dec
  140     | variable • '=' '{' '}'
  166 variable: variable • '.' method
  167         | variable • '[' expr ']'
  169         | variable • brekets_with_content

    OP_AND_ASSIGN  shift, and go to state 135
    OP_INC         shift, and go to state 136
    '.'            shift, and go to state 137
    '='            shift, and go to state 138
    '('            shift, and go to state 139
    '['            shift, and go to state 140

    $default  reduce using rule 127 (expr)

    brekets_with_content  go to state 141


State 61

  162 val_cant_assign: arr_prototype •

    $default  reduce using rule 162 (val_cant_assign)


State 62

   46 designs: interrupt • ';'

    ';'  shift, and go to state 142


State 63

  197 interrupt: K_BREAK ID •

    $default  reduce using rule 197 (interrupt)


State 64

   14 class_dec: K_CLASS ID • '{' ID code_block_class '}'
   15          | K_CLASS ID • K_EXTENDS ID '{' ID code_block_class '}'
   16          | K_CLASS ID • K_EXTENDS ID '.' sequence_id '{' ID code_block_class '}'

    K_EXTENDS  shift, and go to state 143
    '{'        shift, and go to state 144


State 65

  199 interrupt: K_CONTINUE ID •

    $default  reduce using rule 199 (interrupt)


State 66

  168 variable: K_FUNCTION • function_body

    '('  shift, and go to state 74

    function_body  go to state 75


State 67

  165 variable: K_THIS • '.' ID

    '.'  shift, and go to state 88


State 68

  164 variable: ID •

    $default  reduce using rule 164 (variable)


State 69

  148 delete: K_DELETE '(' • variable ')'

    K_FUNCTION  shift, and go to state 66
    K_THIS      shift, and go to state 67
    ID          shift, and go to state 68

    variable  go to state 145


State 70

  147 delete: K_DELETE variable •
  166 variable: variable • '.' method
  167         | variable • '[' expr ']'
  169         | variable • brekets_with_content

    '.'  shift, and go to state 137
    '('  shift, and go to state 139
    '['  shift, and go to state 140

    $default  reduce using rule 147 (delete)

    brekets_with_content  go to state 141


State 71

   66 do_while: K_DO part_of_code • K_WHILE '(' expr ')' ';'

    K_WHILE  shift, and go to state 146


State 72

   74 for: K_FOR '(' • initialization ';' condition ';' afterthought ')' part_of_code
   75    | K_FOR '(' • type ID K_IN expr ')' part_of_code
   76    | K_FOR '(' • ID K_IN expr ')' part_of_code
   77    | K_FOR '(' • type ID K_OF expr ')' part_of_code
   78    | K_FOR '(' • ID K_OF expr ')' part_of_code

    K_CONST        shift, and go to state 3
    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 147
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    $default  reduce using rule 81 (initialization)

    initialization   go to state 148
    declaration      go to state 149
    type             go to state 150
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 151
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 73

   13 function_dec: K_FUNCTION ID • function_body

    '('  shift, and go to state 74

    function_body  go to state 152


State 74

  186 function_body: '(' • args ')' body
  187              | '(' • ')' body

    ID   shift, and go to state 153
    ')'  shift, and go to state 154

    args  go to state 155


State 75

  168 variable: K_FUNCTION function_body •

    $default  reduce using rule 168 (variable)


State 76

   57 if: K_IF '(' • expr ')' part_of_code
   58   | K_IF '(' • expr ')' block K_ELSE block
   59   | K_IF '(' • expr ')' block K_ELSE if

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 156
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 77

   17 import: K_IMPORT L_STR • ';'

    ';'  shift, and go to state 157


State 78

   19 import_content1: ID •
   22                | ID • ',' '{' import_content2 '}'
   23                | ID • ',' '*' K_AS ID

    ','  shift, and go to state 158

    $default  reduce using rule 19 (import_content1)


State 79

   20 import_content1: '*' • K_AS ID

    K_AS  shift, and go to state 159


State 80

   21 import_content1: '{' • import_content2 '}'

    K_DEFAULT  shift, and go to state 160
    L_STR      shift, and go to state 161
    ID         shift, and go to state 162

    import_content2  go to state 163


State 81

   18 import: K_IMPORT import_content1 • K_FROM L_STR ';'

    K_FROM  shift, and go to state 164


State 82

  146 new: K_NEW variable •
  166 variable: variable • '.' method
  167         | variable • '[' expr ']'
  169         | variable • brekets_with_content

    '.'  shift, and go to state 137
    '('  shift, and go to state 139
    '['  shift, and go to state 140

    $default  reduce using rule 146 (new)

    brekets_with_content  go to state 141


State 83

  142 expr: ID • K_IN expr
  164 variable: ID •

    K_IN  shift, and go to state 97

    $default  reduce using rule 164 (variable)


State 84

  135 expr: '(' • expr ')'
  136     | '(' • expr ')' '.' method

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 106
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 85

  163 val_cant_assign: '{' • inner_obj '}'
  194 interrupt: K_RETURN '{' • '}'
  195          | K_RETURN '{' • ret_block_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 166
    '}'    shift, and go to state 167

    ret_block_obj  go to state 168
    inner_obj      go to state 115


State 86

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  193 interrupt: K_RETURN expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 193 (interrupt)


State 87

   86 switch: K_SWITCH '(' • expr ')' '{' in_switch '}'
   87       | K_SWITCH '(' • expr ')' '{' K_DEFAULT ':' beginning '}'
   88       | K_SWITCH '(' • expr ')' '{' '}'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 169
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 88

  165 variable: K_THIS '.' • ID

    ID  shift, and go to state 170


State 89

  132 expr: K_THIS arr_prototype •

    $default  reduce using rule 132 (expr)


State 90

  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171

    inner_obj  go to state 115


State 91

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  191 interrupt: K_THROW expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 191 (interrupt)


State 92

   29 body: '{' • '}'
   30     | '{' • code_inside '}'

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '}'            shift, and go to state 109
    '['            shift, and go to state 36

    function_dec     go to state 110
    class_dec        go to state 111
    body             go to state 112
    code_inside      go to state 113
    designs          go to state 114
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 93

   67 try_catch: K_TRY body • K_FINALLY body
   68          | K_TRY body • K_CATCH '(' '{' ID '}' ')' body
   69          | K_TRY body • K_CATCH '(' '{' ID ',' sequence_id '}' ')' body
   70          | K_TRY body • K_CATCH '(' ID ')' body K_FINALLY body
   71          | K_TRY body • K_CATCH '(' ID ')' body

    K_CATCH    shift, and go to state 172
    K_FINALLY  shift, and go to state 173


State 94

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  144     | K_TYPEOF expr •
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 144 (expr)


State 95

   65 while: K_WHILE '(' • expr ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 174
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 96

  161 val_cant_assign: L_STR '.' • method

    ID  shift, and go to state 175

    method  go to state 176


State 97

  142 expr: ID K_IN • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 177
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 98

   43 designs: ID ':' • designs

    K_BREAK        shift, and go to state 1
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 66
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ';'            shift, and go to state 34
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    designs          go to state 178
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 99

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  126                | OP_ARITHM_SUM expr •
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 126 (expr_arithmetic)


State 100

  119 expr_arithmetic: OP_INC variable •
  166 variable: variable • '.' method
  167         | variable • '[' expr ']'
  169         | variable • brekets_with_content

    '.'  shift, and go to state 137
    '('  shift, and go to state 139
    '['  shift, and go to state 140

    $default  reduce using rule 119 (expr_arithmetic)

    brekets_with_content  go to state 141


State 101

  113 expr_logic: '!' expr •
  116           | expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 113 (expr_logic)


State 102

  114 expr_logic: '~' expr •
  116           | expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 114 (expr_logic)


State 103

   11 function_dec: '(' K_ASYNC • '(' ')' ARROW body ')' '(' ')' ';'

    '('  shift, and go to state 179


State 104

   10 function_dec: '(' K_FUNCTION • function_body ')' '(' ')' ';'
  168 variable: K_FUNCTION • function_body

    '('  shift, and go to state 74

    function_body  go to state 180


State 105

   12 function_dec: '(' '(' • ')' ARROW body ')' '(' ')' ';'
  135 expr: '(' • expr ')'
  136     | '(' • expr ')' '.' method

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ')'            shift, and go to state 181
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 106
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 106

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  135 expr: '(' expr • ')'
  136     | '(' expr • ')' '.' method
  141     | expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 182


State 107

  160 val_cant_assign: L_STR •
  161                | L_STR • '.' method
  174 inner_obj: L_STR • ':' expr

    '.'  shift, and go to state 96
    ':'  shift, and go to state 183

    $default  reduce using rule 160 (val_cant_assign)


State 108

   43 designs: ID • ':' designs
  142 expr: ID • K_IN expr
  164 variable: ID •
  175 inner_obj: ID • ':' expr
  177          | ID • ':' K_FUNCTION ID function_body

    K_IN  shift, and go to state 97
    ':'   shift, and go to state 184

    $default  reduce using rule 164 (variable)


State 109

   29 body: '{' '}' •

    $default  reduce using rule 29 (body)


State 110

   37 code_inside: function_dec •

    $default  reduce using rule 37 (code_inside)


State 111

   38 code_inside: class_dec •

    $default  reduce using rule 38 (code_inside)


State 112

   36 code_inside: body •

    $default  reduce using rule 36 (code_inside)


State 113

   30 body: '{' code_inside • '}'
   39 code_inside: code_inside • designs
   40            | code_inside • body
   41            | code_inside • function_dec
   42            | code_inside • class_dec

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '}'            shift, and go to state 185
    '['            shift, and go to state 36

    function_dec     go to state 186
    class_dec        go to state 187
    body             go to state 188
    designs          go to state 189
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 114

   35 code_inside: designs •

    $default  reduce using rule 35 (code_inside)


State 115

  163 val_cant_assign: '{' inner_obj • '}'
  176 inner_obj: inner_obj • ',' req_inner

    ','  shift, and go to state 190
    '}'  shift, and go to state 191


State 116

  181 arr_prototype: '[' ',' • ']'
  183              | '[' ',' • expr ']'
  185              | '[' ',' • expr ',' ']'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36
    ']'            shift, and go to state 192

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 193
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 117

  180 arr_prototype: '[' ']' •

    $default  reduce using rule 180 (arr_prototype)


State 118

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  182 arr_prototype: '[' expr • ']'
  184              | '[' expr • ',' ']'

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 194
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ']'            shift, and go to state 195


State 119

    0 $accept: prog $end •

    $default  accept


State 120

    4 beginning: beginning part_of_code •

    $default  reduce using rule 4 (beginning)


State 121

  105 declaration: declaration ',' • ID
  106            | declaration ',' • ID '=' expr
  107            | declaration ',' • ID '=' expr OP_LOGIC '{' '}'
  108            | declaration ',' • ID '=' '{' '}'

    ID  shift, and go to state 196


State 122

   45 designs: declaration ';' •

    $default  reduce using rule 45 (designs)


State 123

  100 declaration: type ID •
  101            | type ID • '=' expr
  102            | type ID • '=' expr OP_LOGIC '{' '}'
  103            | type ID • '=' '{' '}'
  104            | type ID • '=' function_dec

    '='  shift, and go to state 197

    $default  reduce using rule 100 (declaration)


State 124

  145 expr: expr K_INSTANCEOF • ID

    ID  shift, and go to state 198


State 125

  122 expr_arithmetic: expr OP_ARITHM_SUM • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 199
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 126

  121 expr_arithmetic: expr OP_ARITHM • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 200
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 127

  116 expr_logic: expr OP_LOGIC • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 201
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 128

  124 expr_arithmetic: expr OP_BIT • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 202
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 129

  141 expr: expr ',' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 203
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 130

  117 expr_logic: expr '?' • expr ':' expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 204
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 131

  125 expr_arithmetic: expr '*' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 205
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 132

   44 designs: expr ';' •

    $default  reduce using rule 44 (designs)


State 133

  159 number: number '.' • method

    ID  shift, and go to state 175

    method  go to state 206


State 134

  143 expr: val_cant_assign K_IN • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 207
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 135

  123 expr_arithmetic: variable OP_AND_ASSIGN • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 208
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 136

  120 expr_arithmetic: variable OP_INC •

    $default  reduce using rule 120 (expr_arithmetic)


State 137

  166 variable: variable '.' • method

    ID  shift, and go to state 175

    method  go to state 209


State 138

  115 expr_logic: variable '=' • expr OP_LOGIC '{' '}'
  138 expr: variable '=' • expr
  139     | variable '=' • function_dec
  140     | variable '=' • '{' '}'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 8
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    '{'            shift, and go to state 210
    '['            shift, and go to state 36

    function_dec     go to state 211
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 212
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 139

  149 brekets_with_content: '(' • ')'
  150                     | '(' • expr ')'
  151                     | '(' • expr ',' ')'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ')'            shift, and go to state 213
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 214
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 140

  167 variable: variable '[' • expr ']'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 215
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 141

  152 brekets_with_content: brekets_with_content • '(' ')'
  153                     | brekets_with_content • '(' expr ')'
  154                     | brekets_with_content • '(' expr ',' ')'
  169 variable: variable brekets_with_content •

    '('  shift, and go to state 216

    $default  reduce using rule 169 (variable)


State 142

   46 designs: interrupt ';' •

    $default  reduce using rule 46 (designs)


State 143

   15 class_dec: K_CLASS ID K_EXTENDS • ID '{' ID code_block_class '}'
   16          | K_CLASS ID K_EXTENDS • ID '.' sequence_id '{' ID code_block_class '}'

    ID  shift, and go to state 217


State 144

   14 class_dec: K_CLASS ID '{' • ID code_block_class '}'

    ID  shift, and go to state 218


State 145

  148 delete: K_DELETE '(' variable • ')'
  166 variable: variable • '.' method
  167         | variable • '[' expr ']'
  169         | variable • brekets_with_content

    '.'  shift, and go to state 137
    '('  shift, and go to state 139
    ')'  shift, and go to state 219
    '['  shift, and go to state 140

    brekets_with_content  go to state 141


State 146

   66 do_while: K_DO part_of_code K_WHILE • '(' expr ')' ';'

    '('  shift, and go to state 220


State 147

   76 for: K_FOR '(' ID • K_IN expr ')' part_of_code
   78    | K_FOR '(' ID • K_OF expr ')' part_of_code
  142 expr: ID • K_IN expr
  164 variable: ID •

    K_IN  shift, and go to state 221
    K_OF  shift, and go to state 222

    $default  reduce using rule 164 (variable)


State 148

   74 for: K_FOR '(' initialization • ';' condition ';' afterthought ')' part_of_code

    ';'  shift, and go to state 223


State 149

   79 initialization: declaration •
  105 declaration: declaration • ',' ID
  106            | declaration • ',' ID '=' expr
  107            | declaration • ',' ID '=' expr OP_LOGIC '{' '}'
  108            | declaration • ',' ID '=' '{' '}'

    ','  shift, and go to state 121

    $default  reduce using rule 79 (initialization)


State 150

   75 for: K_FOR '(' type • ID K_IN expr ')' part_of_code
   77    | K_FOR '(' type • ID K_OF expr ')' part_of_code
  100 declaration: type • ID
  101            | type • ID '=' expr
  102            | type • ID '=' expr OP_LOGIC '{' '}'
  103            | type • ID '=' '{' '}'
  104            | type • ID '=' function_dec

    ID  shift, and go to state 224


State 151

   80 initialization: expr •
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 80 (initialization)


State 152

   13 function_dec: K_FUNCTION ID function_body •

    $default  reduce using rule 13 (function_dec)


State 153

  188 args: ID •
  189     | ID • '=' expr

    '='  shift, and go to state 225

    $default  reduce using rule 188 (args)


State 154

  187 function_body: '(' ')' • body

    '{'  shift, and go to state 92

    body  go to state 226


State 155

  186 function_body: '(' args • ')' body
  190 args: args • ',' args

    ','  shift, and go to state 227
    ')'  shift, and go to state 228


State 156

   57 if: K_IF '(' expr • ')' part_of_code
   58   | K_IF '(' expr • ')' block K_ELSE block
   59   | K_IF '(' expr • ')' block K_ELSE if
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 229


State 157

   17 import: K_IMPORT L_STR ';' •

    $default  reduce using rule 17 (import)


State 158

   22 import_content1: ID ',' • '{' import_content2 '}'
   23                | ID ',' • '*' K_AS ID

    '*'  shift, and go to state 230
    '{'  shift, and go to state 231


State 159

   20 import_content1: '*' K_AS • ID

    ID  shift, and go to state 232


State 160

   26 import_content2: K_DEFAULT • K_AS ID

    K_AS  shift, and go to state 233


State 161

   27 import_content2: L_STR • K_AS ID

    K_AS  shift, and go to state 234


State 162

   24 import_content2: ID •
   25                | ID • K_AS ID

    K_AS  shift, and go to state 235

    $default  reduce using rule 24 (import_content2)


State 163

   21 import_content1: '{' import_content2 • '}'
   28 import_content2: import_content2 • ',' import_content2

    ','  shift, and go to state 236
    '}'  shift, and go to state 237


State 164

   18 import: K_IMPORT import_content1 K_FROM • L_STR ';'

    L_STR  shift, and go to state 238


State 165

  174 inner_obj: L_STR • ':' expr

    ':'  shift, and go to state 183


State 166

   54 ret_block_obj: ID • ':' expr ';'
  175 inner_obj: ID • ':' expr
  177          | ID • ':' K_FUNCTION ID function_body

    ':'  shift, and go to state 239


State 167

  194 interrupt: K_RETURN '{' '}' •

    $default  reduce using rule 194 (interrupt)


State 168

   55 ret_block_obj: ret_block_obj • ID ':' expr
   56              | ret_block_obj • ID ':' expr ';'
  195 interrupt: K_RETURN '{' ret_block_obj • '}'

    ID   shift, and go to state 240
    '}'  shift, and go to state 241


State 169

   86 switch: K_SWITCH '(' expr • ')' '{' in_switch '}'
   87       | K_SWITCH '(' expr • ')' '{' K_DEFAULT ':' beginning '}'
   88       | K_SWITCH '(' expr • ')' '{' '}'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 242


State 170

  165 variable: K_THIS '.' ID •

    $default  reduce using rule 165 (variable)


State 171

  175 inner_obj: ID • ':' expr
  177          | ID • ':' K_FUNCTION ID function_body

    ':'  shift, and go to state 243


State 172

   68 try_catch: K_TRY body K_CATCH • '(' '{' ID '}' ')' body
   69          | K_TRY body K_CATCH • '(' '{' ID ',' sequence_id '}' ')' body
   70          | K_TRY body K_CATCH • '(' ID ')' body K_FINALLY body
   71          | K_TRY body K_CATCH • '(' ID ')' body

    '('  shift, and go to state 244


State 173

   67 try_catch: K_TRY body K_FINALLY • body

    '{'  shift, and go to state 92

    body  go to state 245


State 174

   65 while: K_WHILE '(' expr • ')' part_of_code
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 246


State 175

  170 method: ID •
  171       | ID • brekets_with_content

    '('  shift, and go to state 139

    $default  reduce using rule 170 (method)

    brekets_with_content  go to state 247


State 176

  161 val_cant_assign: L_STR '.' method •
  172 method: method • '.' ID brekets_with_content
  173       | method • '.' ID

    '.'  shift, and go to state 248

    $default  reduce using rule 161 (val_cant_assign)


State 177

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  142     | ID K_IN expr •
  145     | expr • K_INSTANCEOF ID

    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    '*'            shift, and go to state 131

    $default  reduce using rule 142 (expr)


State 178

   43 designs: ID ':' designs •

    $default  reduce using rule 43 (designs)


State 179

   11 function_dec: '(' K_ASYNC '(' • ')' ARROW body ')' '(' ')' ';'

    ')'  shift, and go to state 249


State 180

   10 function_dec: '(' K_FUNCTION function_body • ')' '(' ')' ';'
  168 variable: K_FUNCTION function_body •

    ')'  shift, and go to state 250

    $default  reduce using rule 168 (variable)


State 181

   12 function_dec: '(' '(' ')' • ARROW body ')' '(' ')' ';'

    ARROW  shift, and go to state 251


State 182

  135 expr: '(' expr ')' •
  136     | '(' expr ')' • '.' method

    '.'  shift, and go to state 252

    $default  reduce using rule 135 (expr)


State 183

  174 inner_obj: L_STR ':' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 253
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 184

   43 designs: ID ':' • designs
  175 inner_obj: ID ':' • expr
  177          | ID ':' • K_FUNCTION ID function_body

    K_BREAK        shift, and go to state 1
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 254
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ';'            shift, and go to state 34
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    designs          go to state 178
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 255
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 185

   30 body: '{' code_inside '}' •

    $default  reduce using rule 30 (body)


State 186

   41 code_inside: code_inside function_dec •

    $default  reduce using rule 41 (code_inside)


State 187

   42 code_inside: code_inside class_dec •

    $default  reduce using rule 42 (code_inside)


State 188

   40 code_inside: code_inside body •

    $default  reduce using rule 40 (code_inside)


State 189

   39 code_inside: code_inside designs •

    $default  reduce using rule 39 (code_inside)


State 190

  176 inner_obj: inner_obj ',' • req_inner

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171

    inner_obj  go to state 256
    req_inner  go to state 257


State 191

  163 val_cant_assign: '{' inner_obj '}' •

    $default  reduce using rule 163 (val_cant_assign)


State 192

  181 arr_prototype: '[' ',' ']' •

    $default  reduce using rule 181 (arr_prototype)


State 193

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  183 arr_prototype: '[' ',' expr • ']'
  185              | '[' ',' expr • ',' ']'

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 258
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ']'            shift, and go to state 259


State 194

  141 expr: expr ',' • expr
  184 arr_prototype: '[' expr ',' • ']'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36
    ']'            shift, and go to state 260

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 203
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 195

  182 arr_prototype: '[' expr ']' •

    $default  reduce using rule 182 (arr_prototype)


State 196

  105 declaration: declaration ',' ID •
  106            | declaration ',' ID • '=' expr
  107            | declaration ',' ID • '=' expr OP_LOGIC '{' '}'
  108            | declaration ',' ID • '=' '{' '}'

    '='  shift, and go to state 261

    $default  reduce using rule 105 (declaration)


State 197

  101 declaration: type ID '=' • expr
  102            | type ID '=' • expr OP_LOGIC '{' '}'
  103            | type ID '=' • '{' '}'
  104            | type ID '=' • function_dec

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 8
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    '{'            shift, and go to state 262
    '['            shift, and go to state 36

    function_dec     go to state 263
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 264
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 198

  145 expr: expr K_INSTANCEOF ID •

    $default  reduce using rule 145 (expr)


State 199

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  122                | expr OP_ARITHM_SUM expr •
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    '*'            shift, and go to state 131

    $default  reduce using rule 122 (expr_arithmetic)


State 200

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  121                | expr OP_ARITHM expr •
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 121 (expr_arithmetic)


State 201

  116 expr_logic: expr • OP_LOGIC expr
  116           | expr OP_LOGIC expr •
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_BIT         shift, and go to state 128
    '*'            shift, and go to state 131

    $default  reduce using rule 116 (expr_logic)


State 202

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  124                | expr OP_BIT expr •
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    '*'            shift, and go to state 131

    $default  reduce using rule 124 (expr_arithmetic)


State 203

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  141     | expr ',' expr •
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 141 (expr)


State 204

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  117           | expr '?' expr • ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    ':'            shift, and go to state 265
    '*'            shift, and go to state 131


State 205

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  125                | expr '*' expr •
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    $default  reduce using rule 125 (expr_arithmetic)


State 206

  159 number: number '.' method •
  172 method: method • '.' ID brekets_with_content
  173       | method • '.' ID

    '.'  shift, and go to state 248

    $default  reduce using rule 159 (number)


State 207

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  143     | val_cant_assign K_IN expr •
  145     | expr • K_INSTANCEOF ID

    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    '*'            shift, and go to state 131

    $default  reduce using rule 143 (expr)


State 208

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  123                | variable OP_AND_ASSIGN expr •
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 123 (expr_arithmetic)


State 209

  166 variable: variable '.' method •
  172 method: method • '.' ID brekets_with_content
  173       | method • '.' ID

    '.'  shift, and go to state 248

    $default  reduce using rule 166 (variable)


State 210

  140 expr: variable '=' '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 266

    inner_obj  go to state 115


State 211

  139 expr: variable '=' function_dec •

    $default  reduce using rule 139 (expr)


State 212

  115 expr_logic: variable '=' expr • OP_LOGIC '{' '}'
  116           | expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  138 expr: variable '=' expr •
  141     | expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 267
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 138 (expr)


State 213

  149 brekets_with_content: '(' ')' •

    $default  reduce using rule 149 (brekets_with_content)


State 214

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  150 brekets_with_content: '(' expr • ')'
  151                     | '(' expr • ',' ')'

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 268
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 269


State 215

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  167 variable: variable '[' expr • ']'

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ']'            shift, and go to state 270


State 216

  152 brekets_with_content: brekets_with_content '(' • ')'
  153                     | brekets_with_content '(' • expr ')'
  154                     | brekets_with_content '(' • expr ',' ')'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ')'            shift, and go to state 271
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 272
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 217

   15 class_dec: K_CLASS ID K_EXTENDS ID • '{' ID code_block_class '}'
   16          | K_CLASS ID K_EXTENDS ID • '.' sequence_id '{' ID code_block_class '}'

    '.'  shift, and go to state 273
    '{'  shift, and go to state 274


State 218

   14 class_dec: K_CLASS ID '{' ID • code_block_class '}'

    '('  shift, and go to state 275

    code_block_class  go to state 276


State 219

  148 delete: K_DELETE '(' variable ')' •

    $default  reduce using rule 148 (delete)


State 220

   66 do_while: K_DO part_of_code K_WHILE '(' • expr ')' ';'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 277
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 221

   76 for: K_FOR '(' ID K_IN • expr ')' part_of_code
  142 expr: ID K_IN • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 278
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 222

   78 for: K_FOR '(' ID K_OF • expr ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 279
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 223

   74 for: K_FOR '(' initialization ';' • condition ';' afterthought ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    $default  reduce using rule 85 (condition)

    condition        go to state 280
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 281
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 224

   75 for: K_FOR '(' type ID • K_IN expr ')' part_of_code
   77    | K_FOR '(' type ID • K_OF expr ')' part_of_code
  100 declaration: type ID •
  101            | type ID • '=' expr
  102            | type ID • '=' expr OP_LOGIC '{' '}'
  103            | type ID • '=' '{' '}'
  104            | type ID • '=' function_dec

    K_IN  shift, and go to state 282
    K_OF  shift, and go to state 283
    '='   shift, and go to state 197

    $default  reduce using rule 100 (declaration)


State 225

  189 args: ID '=' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 284
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 226

  187 function_body: '(' ')' body •

    $default  reduce using rule 187 (function_body)


State 227

  190 args: args ',' • args

    ID  shift, and go to state 153

    args  go to state 285


State 228

  186 function_body: '(' args ')' • body

    '{'  shift, and go to state 92

    body  go to state 286


State 229

   57 if: K_IF '(' expr ')' • part_of_code
   58   | K_IF '(' expr ')' • block K_ELSE block
   59   | K_IF '(' expr ')' • block K_ELSE if

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 287
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 288
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 289
    designs          go to state 44
    if               go to state 45
    block            go to state 290
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 291
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 292
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 293


State 230

   23 import_content1: ID ',' '*' • K_AS ID

    K_AS  shift, and go to state 294


State 231

   22 import_content1: ID ',' '{' • import_content2 '}'

    K_DEFAULT  shift, and go to state 160
    L_STR      shift, and go to state 161
    ID         shift, and go to state 162

    import_content2  go to state 295


State 232

   20 import_content1: '*' K_AS ID •

    $default  reduce using rule 20 (import_content1)


State 233

   26 import_content2: K_DEFAULT K_AS • ID

    ID  shift, and go to state 296


State 234

   27 import_content2: L_STR K_AS • ID

    ID  shift, and go to state 297


State 235

   25 import_content2: ID K_AS • ID

    ID  shift, and go to state 298


State 236

   28 import_content2: import_content2 ',' • import_content2

    K_DEFAULT  shift, and go to state 160
    L_STR      shift, and go to state 161
    ID         shift, and go to state 162

    import_content2  go to state 299


State 237

   21 import_content1: '{' import_content2 '}' •

    $default  reduce using rule 21 (import_content1)


State 238

   18 import: K_IMPORT import_content1 K_FROM L_STR • ';'

    ';'  shift, and go to state 300


State 239

   54 ret_block_obj: ID ':' • expr ';'
  175 inner_obj: ID ':' • expr
  177          | ID ':' • K_FUNCTION ID function_body

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 254
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 301
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 240

   55 ret_block_obj: ret_block_obj ID • ':' expr
   56              | ret_block_obj ID • ':' expr ';'

    ':'  shift, and go to state 302


State 241

  195 interrupt: K_RETURN '{' ret_block_obj '}' •

    $default  reduce using rule 195 (interrupt)


State 242

   86 switch: K_SWITCH '(' expr ')' • '{' in_switch '}'
   87       | K_SWITCH '(' expr ')' • '{' K_DEFAULT ':' beginning '}'
   88       | K_SWITCH '(' expr ')' • '{' '}'

    '{'  shift, and go to state 303


State 243

  175 inner_obj: ID ':' • expr
  177          | ID ':' • K_FUNCTION ID function_body

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 254
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 304
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 244

   68 try_catch: K_TRY body K_CATCH '(' • '{' ID '}' ')' body
   69          | K_TRY body K_CATCH '(' • '{' ID ',' sequence_id '}' ')' body
   70          | K_TRY body K_CATCH '(' • ID ')' body K_FINALLY body
   71          | K_TRY body K_CATCH '(' • ID ')' body

    ID   shift, and go to state 305
    '{'  shift, and go to state 306


State 245

   67 try_catch: K_TRY body K_FINALLY body •

    $default  reduce using rule 67 (try_catch)


State 246

   65 while: K_WHILE '(' expr ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 307
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 247

  152 brekets_with_content: brekets_with_content • '(' ')'
  153                     | brekets_with_content • '(' expr ')'
  154                     | brekets_with_content • '(' expr ',' ')'
  171 method: ID brekets_with_content •

    '('  shift, and go to state 216

    $default  reduce using rule 171 (method)


State 248

  172 method: method '.' • ID brekets_with_content
  173       | method '.' • ID

    ID  shift, and go to state 308


State 249

   11 function_dec: '(' K_ASYNC '(' ')' • ARROW body ')' '(' ')' ';'

    ARROW  shift, and go to state 309


State 250

   10 function_dec: '(' K_FUNCTION function_body ')' • '(' ')' ';'

    '('  shift, and go to state 310


State 251

   12 function_dec: '(' '(' ')' ARROW • body ')' '(' ')' ';'

    '{'  shift, and go to state 92

    body  go to state 311


State 252

  136 expr: '(' expr ')' '.' • method

    ID  shift, and go to state 175

    method  go to state 312


State 253

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  174 inner_obj: L_STR ':' expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 174 (inner_obj)


State 254

  168 variable: K_FUNCTION • function_body
  177 inner_obj: ID ':' K_FUNCTION • ID function_body

    ID   shift, and go to state 313
    '('  shift, and go to state 74

    function_body  go to state 75


State 255

   44 designs: expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  175 inner_obj: ID ':' expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 132

    $default  reduce using rule 175 (inner_obj)


State 256

  176 inner_obj: inner_obj • ',' req_inner
  178 req_inner: inner_obj •

    $default  reduce using rule 178 (req_inner)


State 257

  176 inner_obj: inner_obj ',' req_inner •
  179 req_inner: req_inner • ',' inner_obj

    ','  shift, and go to state 314

    $default  reduce using rule 176 (inner_obj)


State 258

  141 expr: expr ',' • expr
  185 arr_prototype: '[' ',' expr ',' • ']'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36
    ']'            shift, and go to state 315

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 203
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 259

  183 arr_prototype: '[' ',' expr ']' •

    $default  reduce using rule 183 (arr_prototype)


State 260

  184 arr_prototype: '[' expr ',' ']' •

    $default  reduce using rule 184 (arr_prototype)


State 261

  106 declaration: declaration ',' ID '=' • expr
  107            | declaration ',' ID '=' • expr OP_LOGIC '{' '}'
  108            | declaration ',' ID '=' • '{' '}'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 316
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 317
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 262

  103 declaration: type ID '=' '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 318

    inner_obj  go to state 115


State 263

  104 declaration: type ID '=' function_dec •

    $default  reduce using rule 104 (declaration)


State 264

  101 declaration: type ID '=' expr •
  102            | type ID '=' expr • OP_LOGIC '{' '}'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 319
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 101 (declaration)


State 265

  117 expr_logic: expr '?' expr ':' • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 320
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 266

  140 expr: variable '=' '{' '}' •

    $default  reduce using rule 140 (expr)


State 267

  115 expr_logic: variable '=' expr OP_LOGIC • '{' '}'
  116           | expr OP_LOGIC • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 321
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 201
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 268

  141 expr: expr ',' • expr
  151 brekets_with_content: '(' expr ',' • ')'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ')'            shift, and go to state 322
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 203
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 269

  150 brekets_with_content: '(' expr ')' •

    $default  reduce using rule 150 (brekets_with_content)


State 270

  167 variable: variable '[' expr ']' •

    $default  reduce using rule 167 (variable)


State 271

  152 brekets_with_content: brekets_with_content '(' ')' •

    $default  reduce using rule 152 (brekets_with_content)


State 272

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  153 brekets_with_content: brekets_with_content '(' expr • ')'
  154                     | brekets_with_content '(' expr • ',' ')'

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 323
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 324


State 273

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' • sequence_id '{' ID code_block_class '}'

    ID  shift, and go to state 325

    sequence_id  go to state 326


State 274

   15 class_dec: K_CLASS ID K_EXTENDS ID '{' • ID code_block_class '}'

    ID  shift, and go to state 327


State 275

   31 code_block_class: '(' • ')' body
   32                 | '(' • args ')' body

    ID   shift, and go to state 153
    ')'  shift, and go to state 328

    args  go to state 329


State 276

   14 class_dec: K_CLASS ID '{' ID code_block_class • '}'
   33 code_block_class: code_block_class • ID '(' ')' body
   34                 | code_block_class • ID '(' args ')' body

    ID   shift, and go to state 330
    '}'  shift, and go to state 331


State 277

   66 do_while: K_DO part_of_code K_WHILE '(' expr • ')' ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 332


State 278

   76 for: K_FOR '(' ID K_IN expr • ')' part_of_code
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  142     | ID K_IN expr •
  145     | expr • K_INSTANCEOF ID

    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    '*'            shift, and go to state 131
    ')'            shift, and go to state 333

    $default  reduce using rule 142 (expr)


State 279

   78 for: K_FOR '(' ID K_OF expr • ')' part_of_code
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 334


State 280

   74 for: K_FOR '(' initialization ';' condition • ';' afterthought ')' part_of_code

    ';'  shift, and go to state 335


State 281

   84 condition: expr •
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 84 (condition)


State 282

   75 for: K_FOR '(' type ID K_IN • expr ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 336
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 283

   77 for: K_FOR '(' type ID K_OF • expr ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 337
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 284

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  189 args: ID '=' expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 189 (args)


State 285

  190 args: args • ',' args
  190     | args ',' args •

    ','  shift, and go to state 227

    $default  reduce using rule 190 (args)


State 286

  186 function_body: '(' args ')' body •

    $default  reduce using rule 186 (function_body)


State 287

   49 designs: ';' •
   63 block: ';' •

    K_ELSE    reduce using rule 63 (block)
    $default  reduce using rule 49 (designs)


State 288

   57 if: K_IF '(' expr ')' part_of_code •

    $default  reduce using rule 57 (if)


State 289

    5 part_of_code: body •
   60 block: body •

    K_ELSE    reduce using rule 60 (block)
    $default  reduce using rule 5 (part_of_code)


State 290

   58 if: K_IF '(' expr ')' block • K_ELSE block
   59   | K_IF '(' expr ')' block • K_ELSE if

    K_ELSE  shift, and go to state 338


State 291

   45 designs: declaration • ';'
   61 block: declaration • ';'
  105 declaration: declaration • ',' ID
  106            | declaration • ',' ID '=' expr
  107            | declaration • ',' ID '=' expr OP_LOGIC '{' '}'
  108            | declaration • ',' ID '=' '{' '}'

    ','  shift, and go to state 121
    ';'  shift, and go to state 339


State 292

   44 designs: expr • ';'
   62 block: expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 340


State 293

   46 designs: interrupt • ';'
   64 block: interrupt • ';'

    ';'  shift, and go to state 341


State 294

   23 import_content1: ID ',' '*' K_AS • ID

    ID  shift, and go to state 342


State 295

   22 import_content1: ID ',' '{' import_content2 • '}'
   28 import_content2: import_content2 • ',' import_content2

    ','  shift, and go to state 236
    '}'  shift, and go to state 343


State 296

   26 import_content2: K_DEFAULT K_AS ID •

    $default  reduce using rule 26 (import_content2)


State 297

   27 import_content2: L_STR K_AS ID •

    $default  reduce using rule 27 (import_content2)


State 298

   25 import_content2: ID K_AS ID •

    $default  reduce using rule 25 (import_content2)


State 299

   28 import_content2: import_content2 • ',' import_content2
   28                | import_content2 ',' import_content2 •

    ','  shift, and go to state 236

    $default  reduce using rule 28 (import_content2)


State 300

   18 import: K_IMPORT import_content1 K_FROM L_STR ';' •

    $default  reduce using rule 18 (import)


State 301

   54 ret_block_obj: ID ':' expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  175 inner_obj: ID ':' expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 344

    $default  reduce using rule 175 (inner_obj)


State 302

   55 ret_block_obj: ret_block_obj ID ':' • expr
   56              | ret_block_obj ID ':' • expr ';'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 345
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 303

   86 switch: K_SWITCH '(' expr ')' '{' • in_switch '}'
   87       | K_SWITCH '(' expr ')' '{' • K_DEFAULT ':' beginning '}'
   88       | K_SWITCH '(' expr ')' '{' • '}'

    K_CASE     shift, and go to state 346
    K_DEFAULT  shift, and go to state 347
    '}'        shift, and go to state 348

    in_switch  go to state 349
    default    go to state 350
    case       go to state 351


State 304

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID
  175 inner_obj: ID ':' expr •

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 175 (inner_obj)


State 305

   70 try_catch: K_TRY body K_CATCH '(' ID • ')' body K_FINALLY body
   71          | K_TRY body K_CATCH '(' ID • ')' body

    ')'  shift, and go to state 352


State 306

   68 try_catch: K_TRY body K_CATCH '(' '{' • ID '}' ')' body
   69          | K_TRY body K_CATCH '(' '{' • ID ',' sequence_id '}' ')' body

    ID  shift, and go to state 353


State 307

   65 while: K_WHILE '(' expr ')' part_of_code •

    $default  reduce using rule 65 (while)


State 308

  172 method: method '.' ID • brekets_with_content
  173       | method '.' ID •

    '('  shift, and go to state 139

    $default  reduce using rule 173 (method)

    brekets_with_content  go to state 354


State 309

   11 function_dec: '(' K_ASYNC '(' ')' ARROW • body ')' '(' ')' ';'

    '{'  shift, and go to state 92

    body  go to state 355


State 310

   10 function_dec: '(' K_FUNCTION function_body ')' '(' • ')' ';'

    ')'  shift, and go to state 356


State 311

   12 function_dec: '(' '(' ')' ARROW body • ')' '(' ')' ';'

    ')'  shift, and go to state 357


State 312

  136 expr: '(' expr ')' '.' method •
  172 method: method • '.' ID brekets_with_content
  173       | method • '.' ID

    '.'  shift, and go to state 248

    $default  reduce using rule 136 (expr)


State 313

  177 inner_obj: ID ':' K_FUNCTION ID • function_body

    '('  shift, and go to state 74

    function_body  go to state 358


State 314

  179 req_inner: req_inner ',' • inner_obj

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171

    inner_obj  go to state 359


State 315

  185 arr_prototype: '[' ',' expr ',' ']' •

    $default  reduce using rule 185 (arr_prototype)


State 316

  108 declaration: declaration ',' ID '=' '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 360

    inner_obj  go to state 115


State 317

  106 declaration: declaration ',' ID '=' expr •
  107            | declaration ',' ID '=' expr • OP_LOGIC '{' '}'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 361
    OP_BIT         shift, and go to state 128
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 106 (declaration)


State 318

  103 declaration: type ID '=' '{' '}' •

    $default  reduce using rule 103 (declaration)


State 319

  102 declaration: type ID '=' expr OP_LOGIC • '{' '}'
  116 expr_logic: expr OP_LOGIC • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 362
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 201
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 320

  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  117           | expr '?' expr ':' expr •
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    '*'            shift, and go to state 131

    $default  reduce using rule 117 (expr_logic)


State 321

  115 expr_logic: variable '=' expr OP_LOGIC '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 363

    inner_obj  go to state 115


State 322

  151 brekets_with_content: '(' expr ',' ')' •

    $default  reduce using rule 151 (brekets_with_content)


State 323

  141 expr: expr ',' • expr
  154 brekets_with_content: brekets_with_content '(' expr ',' • ')'

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ')'            shift, and go to state 364
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 203
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 324

  153 brekets_with_content: brekets_with_content '(' expr ')' •

    $default  reduce using rule 153 (brekets_with_content)


State 325

   72 sequence_id: ID •
   73            | ID • ',' sequence_id

    ','  shift, and go to state 365

    $default  reduce using rule 72 (sequence_id)


State 326

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' sequence_id • '{' ID code_block_class '}'

    '{'  shift, and go to state 366


State 327

   15 class_dec: K_CLASS ID K_EXTENDS ID '{' ID • code_block_class '}'

    '('  shift, and go to state 275

    code_block_class  go to state 367


State 328

   31 code_block_class: '(' ')' • body

    '{'  shift, and go to state 92

    body  go to state 368


State 329

   32 code_block_class: '(' args • ')' body
  190 args: args • ',' args

    ','  shift, and go to state 227
    ')'  shift, and go to state 369


State 330

   33 code_block_class: code_block_class ID • '(' ')' body
   34                 | code_block_class ID • '(' args ')' body

    '('  shift, and go to state 370


State 331

   14 class_dec: K_CLASS ID '{' ID code_block_class '}' •

    $default  reduce using rule 14 (class_dec)


State 332

   66 do_while: K_DO part_of_code K_WHILE '(' expr ')' • ';'

    ';'  shift, and go to state 371


State 333

   76 for: K_FOR '(' ID K_IN expr ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 372
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 334

   78 for: K_FOR '(' ID K_OF expr ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 373
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 335

   74 for: K_FOR '(' initialization ';' condition ';' • afterthought ')' part_of_code

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    $default  reduce using rule 83 (afterthought)

    afterthought     go to state 374
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 375
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 336

   75 for: K_FOR '(' type ID K_IN expr • ')' part_of_code
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 376


State 337

   77 for: K_FOR '(' type ID K_OF expr • ')' part_of_code
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ')'            shift, and go to state 377


State 338

   58 if: K_IF '(' expr ')' block K_ELSE • block
   59   | K_IF '(' expr ')' block K_ELSE • if

    K_BREAK        shift, and go to state 1
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_IF           shift, and go to state 9
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    ';'            shift, and go to state 378
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    body             go to state 379
    if               go to state 380
    block            go to state 381
    declaration      go to state 382
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 383
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 384


State 339

   45 designs: declaration ';' •
   61 block: declaration ';' •

    K_ELSE    reduce using rule 61 (block)
    $default  reduce using rule 45 (designs)


State 340

   44 designs: expr ';' •
   62 block: expr ';' •

    K_ELSE    reduce using rule 62 (block)
    $default  reduce using rule 44 (designs)


State 341

   46 designs: interrupt ';' •
   64 block: interrupt ';' •

    K_ELSE    reduce using rule 64 (block)
    $default  reduce using rule 46 (designs)


State 342

   23 import_content1: ID ',' '*' K_AS ID •

    $default  reduce using rule 23 (import_content1)


State 343

   22 import_content1: ID ',' '{' import_content2 '}' •

    $default  reduce using rule 22 (import_content1)


State 344

   54 ret_block_obj: ID ':' expr ';' •

    $default  reduce using rule 54 (ret_block_obj)


State 345

   55 ret_block_obj: ret_block_obj ID ':' expr •
   56              | ret_block_obj ID ':' expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 385

    $default  reduce using rule 55 (ret_block_obj)


State 346

   96 case: K_CASE • expr ':'
   97     | K_CASE • expr ':' beginning

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 386
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 347

   87 switch: K_SWITCH '(' expr ')' '{' K_DEFAULT • ':' beginning '}'
   91 default: K_DEFAULT • ':' case
   92        | K_DEFAULT • ':' beginning case

    ':'  shift, and go to state 387


State 348

   88 switch: K_SWITCH '(' expr ')' '{' '}' •

    $default  reduce using rule 88 (switch)


State 349

   86 switch: K_SWITCH '(' expr ')' '{' in_switch • '}'

    '}'  shift, and go to state 388


State 350

   90 in_switch: default •

    $default  reduce using rule 90 (in_switch)


State 351

   89 in_switch: case •
   93 default: case • K_DEFAULT ':' beginning
   94        | case • K_DEFAULT ':' beginning case
   95        | case • K_DEFAULT ':'
   98 case: case • K_CASE expr ':'
   99     | case • K_CASE expr ':' beginning

    K_CASE     shift, and go to state 389
    K_DEFAULT  shift, and go to state 390

    $default  reduce using rule 89 (in_switch)


State 352

   70 try_catch: K_TRY body K_CATCH '(' ID ')' • body K_FINALLY body
   71          | K_TRY body K_CATCH '(' ID ')' • body

    '{'  shift, and go to state 92

    body  go to state 391


State 353

   68 try_catch: K_TRY body K_CATCH '(' '{' ID • '}' ')' body
   69          | K_TRY body K_CATCH '(' '{' ID • ',' sequence_id '}' ')' body

    ','  shift, and go to state 392
    '}'  shift, and go to state 393


State 354

  152 brekets_with_content: brekets_with_content • '(' ')'
  153                     | brekets_with_content • '(' expr ')'
  154                     | brekets_with_content • '(' expr ',' ')'
  172 method: method '.' ID brekets_with_content •

    '('  shift, and go to state 216

    $default  reduce using rule 172 (method)


State 355

   11 function_dec: '(' K_ASYNC '(' ')' ARROW body • ')' '(' ')' ';'

    ')'  shift, and go to state 394


State 356

   10 function_dec: '(' K_FUNCTION function_body ')' '(' ')' • ';'

    ';'  shift, and go to state 395


State 357

   12 function_dec: '(' '(' ')' ARROW body ')' • '(' ')' ';'

    '('  shift, and go to state 396


State 358

  177 inner_obj: ID ':' K_FUNCTION ID function_body •

    $default  reduce using rule 177 (inner_obj)


State 359

  176 inner_obj: inner_obj • ',' req_inner
  179 req_inner: req_inner ',' inner_obj •

    ','  shift, and go to state 190

    $default  reduce using rule 179 (req_inner)


State 360

  108 declaration: declaration ',' ID '=' '{' '}' •

    $default  reduce using rule 108 (declaration)


State 361

  107 declaration: declaration ',' ID '=' expr OP_LOGIC • '{' '}'
  116 expr_logic: expr OP_LOGIC • expr

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 397
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 201
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 362

  102 declaration: type ID '=' expr OP_LOGIC '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 398

    inner_obj  go to state 115


State 363

  115 expr_logic: variable '=' expr OP_LOGIC '{' '}' •

    $default  reduce using rule 115 (expr_logic)


State 364

  154 brekets_with_content: brekets_with_content '(' expr ',' ')' •

    $default  reduce using rule 154 (brekets_with_content)


State 365

   73 sequence_id: ID ',' • sequence_id

    ID  shift, and go to state 325

    sequence_id  go to state 399


State 366

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' sequence_id '{' • ID code_block_class '}'

    ID  shift, and go to state 400


State 367

   15 class_dec: K_CLASS ID K_EXTENDS ID '{' ID code_block_class • '}'
   33 code_block_class: code_block_class • ID '(' ')' body
   34                 | code_block_class • ID '(' args ')' body

    ID   shift, and go to state 330
    '}'  shift, and go to state 401


State 368

   31 code_block_class: '(' ')' body •

    $default  reduce using rule 31 (code_block_class)


State 369

   32 code_block_class: '(' args ')' • body

    '{'  shift, and go to state 92

    body  go to state 402


State 370

   33 code_block_class: code_block_class ID '(' • ')' body
   34                 | code_block_class ID '(' • args ')' body

    ID   shift, and go to state 153
    ')'  shift, and go to state 403

    args  go to state 404


State 371

   66 do_while: K_DO part_of_code K_WHILE '(' expr ')' ';' •

    $default  reduce using rule 66 (do_while)


State 372

   76 for: K_FOR '(' ID K_IN expr ')' part_of_code •

    $default  reduce using rule 76 (for)


State 373

   78 for: K_FOR '(' ID K_OF expr ')' part_of_code •

    $default  reduce using rule 78 (for)


State 374

   74 for: K_FOR '(' initialization ';' condition ';' afterthought • ')' part_of_code

    ')'  shift, and go to state 405


State 375

   82 afterthought: expr •
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131

    $default  reduce using rule 82 (afterthought)


State 376

   75 for: K_FOR '(' type ID K_IN expr ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 406
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 377

   77 for: K_FOR '(' type ID K_OF expr ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 407
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 378

   63 block: ';' •

    $default  reduce using rule 63 (block)


State 379

   60 block: body •

    $default  reduce using rule 60 (block)


State 380

   59 if: K_IF '(' expr ')' block K_ELSE if •

    $default  reduce using rule 59 (if)


State 381

   58 if: K_IF '(' expr ')' block K_ELSE block •

    $default  reduce using rule 58 (if)


State 382

   61 block: declaration • ';'
  105 declaration: declaration • ',' ID
  106            | declaration • ',' ID '=' expr
  107            | declaration • ',' ID '=' expr OP_LOGIC '{' '}'
  108            | declaration • ',' ID '=' '{' '}'

    ','  shift, and go to state 121
    ';'  shift, and go to state 408


State 383

   62 block: expr • ';'
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    '*'            shift, and go to state 131
    ';'            shift, and go to state 409


State 384

   64 block: interrupt • ';'

    ';'  shift, and go to state 410


State 385

   56 ret_block_obj: ret_block_obj ID ':' expr ';' •

    $default  reduce using rule 56 (ret_block_obj)


State 386

   96 case: K_CASE expr • ':'
   97     | K_CASE expr • ':' beginning
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    ':'            shift, and go to state 411
    '*'            shift, and go to state 131


State 387

   87 switch: K_SWITCH '(' expr ')' '{' K_DEFAULT ':' • beginning '}'
   91 default: K_DEFAULT ':' • case
   92        | K_DEFAULT ':' • beginning case

    K_BREAK        shift, and go to state 1
    K_CASE         shift, and go to state 346
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    beginning        go to state 412
    part_of_code     go to state 39
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    case             go to state 413
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 388

   86 switch: K_SWITCH '(' expr ')' '{' in_switch '}' •

    $default  reduce using rule 86 (switch)


State 389

   98 case: case K_CASE • expr ':'
   99     | case K_CASE • expr ':' beginning

    K_DELETE       shift, and go to state 5
    K_FUNCTION     shift, and go to state 66
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_THIS         shift, and go to state 16
    K_TYPEOF       shift, and go to state 19
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 83
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 84
    '{'            shift, and go to state 90
    '['            shift, and go to state 36

    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 414
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61


State 390

   93 default: case K_DEFAULT • ':' beginning
   94        | case K_DEFAULT • ':' beginning case
   95        | case K_DEFAULT • ':'

    ':'  shift, and go to state 415


State 391

   70 try_catch: K_TRY body K_CATCH '(' ID ')' body • K_FINALLY body
   71          | K_TRY body K_CATCH '(' ID ')' body •

    K_FINALLY  shift, and go to state 416

    $default  reduce using rule 71 (try_catch)


State 392

   69 try_catch: K_TRY body K_CATCH '(' '{' ID ',' • sequence_id '}' ')' body

    ID  shift, and go to state 325

    sequence_id  go to state 417


State 393

   68 try_catch: K_TRY body K_CATCH '(' '{' ID '}' • ')' body

    ')'  shift, and go to state 418


State 394

   11 function_dec: '(' K_ASYNC '(' ')' ARROW body ')' • '(' ')' ';'

    '('  shift, and go to state 419


State 395

   10 function_dec: '(' K_FUNCTION function_body ')' '(' ')' ';' •

    $default  reduce using rule 10 (function_dec)


State 396

   12 function_dec: '(' '(' ')' ARROW body ')' '(' • ')' ';'

    ')'  shift, and go to state 420


State 397

  107 declaration: declaration ',' ID '=' expr OP_LOGIC '{' • '}'
  163 val_cant_assign: '{' • inner_obj '}'

    L_STR  shift, and go to state 165
    ID     shift, and go to state 171
    '}'    shift, and go to state 421

    inner_obj  go to state 115


State 398

  102 declaration: type ID '=' expr OP_LOGIC '{' '}' •

    $default  reduce using rule 102 (declaration)


State 399

   73 sequence_id: ID ',' sequence_id •

    $default  reduce using rule 73 (sequence_id)


State 400

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' sequence_id '{' ID • code_block_class '}'

    '('  shift, and go to state 275

    code_block_class  go to state 422


State 401

   15 class_dec: K_CLASS ID K_EXTENDS ID '{' ID code_block_class '}' •

    $default  reduce using rule 15 (class_dec)


State 402

   32 code_block_class: '(' args ')' body •

    $default  reduce using rule 32 (code_block_class)


State 403

   33 code_block_class: code_block_class ID '(' ')' • body

    '{'  shift, and go to state 92

    body  go to state 423


State 404

   34 code_block_class: code_block_class ID '(' args • ')' body
  190 args: args • ',' args

    ','  shift, and go to state 227
    ')'  shift, and go to state 424


State 405

   74 for: K_FOR '(' initialization ';' condition ';' afterthought ')' • part_of_code

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    part_of_code     go to state 425
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 406

   75 for: K_FOR '(' type ID K_IN expr ')' part_of_code •

    $default  reduce using rule 75 (for)


State 407

   77 for: K_FOR '(' type ID K_OF expr ')' part_of_code •

    $default  reduce using rule 77 (for)


State 408

   61 block: declaration ';' •

    $default  reduce using rule 61 (block)


State 409

   62 block: expr ';' •

    $default  reduce using rule 62 (block)


State 410

   64 block: interrupt ';' •

    $default  reduce using rule 64 (block)


State 411

   96 case: K_CASE expr ':' •
   97     | K_CASE expr ':' • beginning

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 96 (case)

    beginning        go to state 426
    part_of_code     go to state 39
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 412

    4 beginning: beginning • part_of_code
   87 switch: K_SWITCH '(' expr ')' '{' K_DEFAULT ':' beginning • '}'
   92 default: K_DEFAULT ':' beginning • case

    K_BREAK        shift, and go to state 1
    K_CASE         shift, and go to state 346
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '}'            shift, and go to state 427
    '['            shift, and go to state 36

    part_of_code     go to state 120
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    case             go to state 428
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 413

   91 default: K_DEFAULT ':' case •
   98 case: case • K_CASE expr ':'
   99     | case • K_CASE expr ':' beginning

    K_CASE  shift, and go to state 389

    $default  reduce using rule 91 (default)


State 414

   98 case: case K_CASE expr • ':'
   99     | case K_CASE expr • ':' beginning
  116 expr_logic: expr • OP_LOGIC expr
  117           | expr • '?' expr ':' expr
  121 expr_arithmetic: expr • OP_ARITHM expr
  122                | expr • OP_ARITHM_SUM expr
  124                | expr • OP_BIT expr
  125                | expr • '*' expr
  141 expr: expr • ',' expr
  145     | expr • K_INSTANCEOF ID

    K_INSTANCEOF   shift, and go to state 124
    OP_ARITHM_SUM  shift, and go to state 125
    OP_ARITHM      shift, and go to state 126
    OP_LOGIC       shift, and go to state 127
    OP_BIT         shift, and go to state 128
    ','            shift, and go to state 129
    '?'            shift, and go to state 130
    ':'            shift, and go to state 429
    '*'            shift, and go to state 131


State 415

   93 default: case K_DEFAULT ':' • beginning
   94        | case K_DEFAULT ':' • beginning case
   95        | case K_DEFAULT ':' •

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 95 (default)

    beginning        go to state 430
    part_of_code     go to state 39
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 416

   70 try_catch: K_TRY body K_CATCH '(' ID ')' body K_FINALLY • body

    '{'  shift, and go to state 92

    body  go to state 431


State 417

   69 try_catch: K_TRY body K_CATCH '(' '{' ID ',' sequence_id • '}' ')' body

    '}'  shift, and go to state 432


State 418

   68 try_catch: K_TRY body K_CATCH '(' '{' ID '}' ')' • body

    '{'  shift, and go to state 92

    body  go to state 433


State 419

   11 function_dec: '(' K_ASYNC '(' ')' ARROW body ')' '(' • ')' ';'

    ')'  shift, and go to state 434


State 420

   12 function_dec: '(' '(' ')' ARROW body ')' '(' ')' • ';'

    ';'  shift, and go to state 435


State 421

  107 declaration: declaration ',' ID '=' expr OP_LOGIC '{' '}' •

    $default  reduce using rule 107 (declaration)


State 422

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' sequence_id '{' ID code_block_class • '}'
   33 code_block_class: code_block_class • ID '(' ')' body
   34                 | code_block_class • ID '(' args ')' body

    ID   shift, and go to state 330
    '}'  shift, and go to state 436


State 423

   33 code_block_class: code_block_class ID '(' ')' body •

    $default  reduce using rule 33 (code_block_class)


State 424

   34 code_block_class: code_block_class ID '(' args ')' • body

    '{'  shift, and go to state 92

    body  go to state 437


State 425

   74 for: K_FOR '(' initialization ';' condition ';' afterthought ')' part_of_code •

    $default  reduce using rule 74 (for)


State 426

    4 beginning: beginning • part_of_code
   97 case: K_CASE expr ':' beginning •

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 97 (case)

    part_of_code     go to state 120
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 427

   87 switch: K_SWITCH '(' expr ')' '{' K_DEFAULT ':' beginning '}' •

    $default  reduce using rule 87 (switch)


State 428

   92 default: K_DEFAULT ':' beginning case •
   98 case: case • K_CASE expr ':'
   99     | case • K_CASE expr ':' beginning

    K_CASE  shift, and go to state 389

    $default  reduce using rule 92 (default)


State 429

   98 case: case K_CASE expr ':' •
   99     | case K_CASE expr ':' • beginning

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 98 (case)

    beginning        go to state 438
    part_of_code     go to state 39
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 430

    4 beginning: beginning • part_of_code
   93 default: case K_DEFAULT ':' beginning •
   94        | case K_DEFAULT ':' beginning • case

    K_BREAK        shift, and go to state 1
    K_CASE         shift, and go to state 346
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 93 (default)

    part_of_code     go to state 120
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    case             go to state 439
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 431

   70 try_catch: K_TRY body K_CATCH '(' ID ')' body K_FINALLY body •

    $default  reduce using rule 70 (try_catch)


State 432

   69 try_catch: K_TRY body K_CATCH '(' '{' ID ',' sequence_id '}' • ')' body

    ')'  shift, and go to state 440


State 433

   68 try_catch: K_TRY body K_CATCH '(' '{' ID '}' ')' body •

    $default  reduce using rule 68 (try_catch)


State 434

   11 function_dec: '(' K_ASYNC '(' ')' ARROW body ')' '(' ')' • ';'

    ';'  shift, and go to state 441


State 435

   12 function_dec: '(' '(' ')' ARROW body ')' '(' ')' ';' •

    $default  reduce using rule 12 (function_dec)


State 436

   16 class_dec: K_CLASS ID K_EXTENDS ID '.' sequence_id '{' ID code_block_class '}' •

    $default  reduce using rule 16 (class_dec)


State 437

   34 code_block_class: code_block_class ID '(' args ')' body •

    $default  reduce using rule 34 (code_block_class)


State 438

    4 beginning: beginning • part_of_code
   99 case: case K_CASE expr ':' beginning •

    K_BREAK        shift, and go to state 1
    K_CLASS        shift, and go to state 2
    K_CONST        shift, and go to state 3
    K_CONTINUE     shift, and go to state 4
    K_DELETE       shift, and go to state 5
    K_DO           shift, and go to state 6
    K_FOR          shift, and go to state 7
    K_FUNCTION     shift, and go to state 8
    K_IF           shift, and go to state 9
    K_IMPORT       shift, and go to state 10
    K_LET          shift, and go to state 11
    K_NEW          shift, and go to state 12
    K_NULL         shift, and go to state 13
    K_RETURN       shift, and go to state 14
    K_SWITCH       shift, and go to state 15
    K_THIS         shift, and go to state 16
    K_THROW        shift, and go to state 17
    K_TRY          shift, and go to state 18
    K_TYPEOF       shift, and go to state 19
    K_VAR          shift, and go to state 20
    K_WHILE        shift, and go to state 21
    L_INT          shift, and go to state 22
    L_INT_OCT      shift, and go to state 23
    L_INT_HEX      shift, and go to state 24
    L_FLOAT        shift, and go to state 25
    L_BOOL         shift, and go to state 26
    L_STR          shift, and go to state 27
    ID             shift, and go to state 28
    OP_ARITHM_SUM  shift, and go to state 29
    OP_INC         shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '('            shift, and go to state 33
    ';'            shift, and go to state 34
    '{'            shift, and go to state 35
    '['            shift, and go to state 36

    $default  reduce using rule 99 (case)

    part_of_code     go to state 120
    function_dec     go to state 40
    class_dec        go to state 41
    import           go to state 42
    body             go to state 43
    designs          go to state 44
    if               go to state 45
    while            go to state 46
    do_while         go to state 47
    try_catch        go to state 48
    for              go to state 49
    switch           go to state 50
    declaration      go to state 51
    type             go to state 52
    expr_logic       go to state 53
    expr_arithmetic  go to state 54
    expr             go to state 55
    new              go to state 56
    delete           go to state 57
    number           go to state 58
    val_cant_assign  go to state 59
    variable         go to state 60
    arr_prototype    go to state 61
    interrupt        go to state 62


State 439

   94 default: case K_DEFAULT ':' beginning case •
   98 case: case • K_CASE expr ':'
   99     | case • K_CASE expr ':' beginning

    K_CASE  shift, and go to state 389

    $default  reduce using rule 94 (default)


State 440

   69 try_catch: K_TRY body K_CATCH '(' '{' ID ',' sequence_id '}' ')' • body

    '{'  shift, and go to state 92

    body  go to state 442


State 441

   11 function_dec: '(' K_ASYNC '(' ')' ARROW body ')' '(' ')' ';' •

    $default  reduce using rule 11 (function_dec)


State 442

   69 try_catch: K_TRY body K_CATCH '(' '{' ID ',' sequence_id '}' ')' body •

    $default  reduce using rule 69 (try_catch)
